/*
 * Swagger URL Shortener
 *
 * URL Shortener API
 *
 * API version: 1.0.0
 * Contact: admin@urlshortener.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package apiserver

import (
	"encoding/json"
	"errors"
	"fmt"
	"html/template"
	"net/http"
	"url_shortener/internal/model"
	"url_shortener/internal/version"

	"github.com/gorilla/mux"
)

func (s *Server) createShortLink(w http.ResponseWriter, r *http.Request) {
	if r.Body == nil {
		sendError(w, http.StatusBadRequest, nil)
		return
	}

	req := model.LongLinkRequest{}
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		sendError(w, http.StatusBadRequest, err)
		return
	}

	if req.LongLink != "" && !isURL(req.LongLink) {
		sendError(w, http.StatusBadRequest, errors.New("long link is not url"))
		return
	}

	shortLink := s.generator.Generate()
	if err := s.store.Put(shortLink, req.LongLink); err != nil {
		sendError(w, http.StatusInternalServerError, err)
		return
	}

	shortLinkResponse := model.ShortLinkResponse{
		ShortLink: shortLink,
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	err := json.NewEncoder(w).Encode(shortLinkResponse)
	if err != nil {
		sendError(w, http.StatusInternalServerError, err)
		return
	}

	w.WriteHeader(http.StatusCreated)
}

func (s *Server) redirect(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	shortLink, ok := vars["shortLink"]
	if !ok {
		sendError(w, http.StatusBadRequest, nil)
		return
	}

	longLink, err := s.store.Get(shortLink)
	if err != nil {
		sendError(w, http.StatusNotFound, err)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Location", longLink)
	w.WriteHeader(http.StatusFound)
}

func (s *Server) version(w http.ResponseWriter, r *http.Request) {
	programName, gitTag, gitCommit, gitBranch := version.Version()
	fmt.Fprintf(w, "programName = %s gitTag = %s gitCommit = %s gitBranch = %s", programName, gitTag, gitCommit, gitBranch)
	w.WriteHeader(http.StatusOK)
}

func (s *Server) index(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseGlob("./templates/*.html.tmpl")
	if err != nil {
		sendError(w, http.StatusInternalServerError, err)
		return
	}

	err = tmpl.ExecuteTemplate(w, "index.html.tmpl", nil)
	if err != nil {
		sendError(w, http.StatusInternalServerError, err)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func sendError(w http.ResponseWriter, code int, err error) {
	e := model.ErrorMessage{
		Code: int32(code),
	}

	if err != nil {
		e.Error_ = err.Error()
	}

	data, err := json.Marshal(e)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(code)
	_, _ = w.Write(data)
}
